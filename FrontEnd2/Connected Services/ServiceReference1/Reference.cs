//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrontEnd2.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/Final_project_Razpredeleni_prilojenia")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/ApplicationService1.DTOs")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double userAgeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime userCreatedField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double userAge {
            get {
                return this.userAgeField;
            }
            set {
                if ((this.userAgeField.Equals(value) != true)) {
                    this.userAgeField = value;
                    this.RaisePropertyChanged("userAge");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime userCreated {
            get {
                return this.userCreatedField;
            }
            set {
                if ((this.userCreatedField.Equals(value) != true)) {
                    this.userCreatedField = value;
                    this.RaisePropertyChanged("userCreated");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PostDTO", Namespace="http://schemas.datacontract.org/2004/07/ApplicationService1.DTOs")]
    [System.SerializableAttribute()]
    public partial class PostDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string keytermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long postNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime postcreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string smallerdescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keyterms {
            get {
                return this.keytermsField;
            }
            set {
                if ((object.ReferenceEquals(this.keytermsField, value) != true)) {
                    this.keytermsField = value;
                    this.RaisePropertyChanged("keyterms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long postNumber {
            get {
                return this.postNumberField;
            }
            set {
                if ((this.postNumberField.Equals(value) != true)) {
                    this.postNumberField = value;
                    this.RaisePropertyChanged("postNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime postcreated {
            get {
                return this.postcreatedField;
            }
            set {
                if ((this.postcreatedField.Equals(value) != true)) {
                    this.postcreatedField = value;
                    this.RaisePropertyChanged("postcreated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string smallerdescription {
            get {
                return this.smallerdescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.smallerdescriptionField, value) != true)) {
                    this.smallerdescriptionField = value;
                    this.RaisePropertyChanged("smallerdescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadDTO", Namespace="http://schemas.datacontract.org/2004/07/ApplicationService1.DTOs")]
    [System.SerializableAttribute()]
    public partial class ThreadDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PostIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FrontEnd2.ServiceReference1.PostDTO postField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime threadCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string threadDiscriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string threadKeyTermsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string threadNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long threadNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private FrontEnd2.ServiceReference1.UserDTO userField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PostId {
            get {
                return this.PostIdField;
            }
            set {
                if ((this.PostIdField.Equals(value) != true)) {
                    this.PostIdField = value;
                    this.RaisePropertyChanged("PostId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FrontEnd2.ServiceReference1.PostDTO post {
            get {
                return this.postField;
            }
            set {
                if ((object.ReferenceEquals(this.postField, value) != true)) {
                    this.postField = value;
                    this.RaisePropertyChanged("post");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime threadCreationDate {
            get {
                return this.threadCreationDateField;
            }
            set {
                if ((this.threadCreationDateField.Equals(value) != true)) {
                    this.threadCreationDateField = value;
                    this.RaisePropertyChanged("threadCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string threadDiscription {
            get {
                return this.threadDiscriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.threadDiscriptionField, value) != true)) {
                    this.threadDiscriptionField = value;
                    this.RaisePropertyChanged("threadDiscription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string threadKeyTerms {
            get {
                return this.threadKeyTermsField;
            }
            set {
                if ((object.ReferenceEquals(this.threadKeyTermsField, value) != true)) {
                    this.threadKeyTermsField = value;
                    this.RaisePropertyChanged("threadKeyTerms");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string threadName {
            get {
                return this.threadNameField;
            }
            set {
                if ((object.ReferenceEquals(this.threadNameField, value) != true)) {
                    this.threadNameField = value;
                    this.RaisePropertyChanged("threadName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long threadNumber {
            get {
                return this.threadNumberField;
            }
            set {
                if ((this.threadNumberField.Equals(value) != true)) {
                    this.threadNumberField = value;
                    this.RaisePropertyChanged("threadNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public FrontEnd2.ServiceReference1.UserDTO user {
            get {
                return this.userField;
            }
            set {
                if ((object.ReferenceEquals(this.userField, value) != true)) {
                    this.userField = value;
                    this.RaisePropertyChanged("user");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        FrontEnd2.ServiceReference1.CompositeType GetDataUsingDataContract(FrontEnd2.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(FrontEnd2.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUser", ReplyAction="http://tempuri.org/IService1/GetUserResponse")]
        FrontEnd2.ServiceReference1.UserDTO[] GetUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUser", ReplyAction="http://tempuri.org/IService1/GetUserResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.UserDTO[]> GetUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        FrontEnd2.ServiceReference1.UserDTO GetUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserById", ReplyAction="http://tempuri.org/IService1/GetUserByIdResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.UserDTO> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUser", ReplyAction="http://tempuri.org/IService1/PostUserResponse")]
        string PostUser(FrontEnd2.ServiceReference1.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PostUser", ReplyAction="http://tempuri.org/IService1/PostUserResponse")]
        System.Threading.Tasks.Task<string> PostUserAsync(FrontEnd2.ServiceReference1.UserDTO userDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        string DeleteUser(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task<string> DeleteUserAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPost", ReplyAction="http://tempuri.org/IService1/GetPostResponse")]
        FrontEnd2.ServiceReference1.PostDTO[] GetPost();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPost", ReplyAction="http://tempuri.org/IService1/GetPostResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.PostDTO[]> GetPostAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPostById", ReplyAction="http://tempuri.org/IService1/getPostByIdResponse")]
        FrontEnd2.ServiceReference1.PostDTO getPostById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getPostById", ReplyAction="http://tempuri.org/IService1/getPostByIdResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.PostDTO> getPostByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPost", ReplyAction="http://tempuri.org/IService1/AddPostResponse")]
        string AddPost(FrontEnd2.ServiceReference1.PostDTO postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddPost", ReplyAction="http://tempuri.org/IService1/AddPostResponse")]
        System.Threading.Tasks.Task<string> AddPostAsync(FrontEnd2.ServiceReference1.PostDTO postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePost", ReplyAction="http://tempuri.org/IService1/DeletePostResponse")]
        string DeletePost(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeletePost", ReplyAction="http://tempuri.org/IService1/DeletePostResponse")]
        System.Threading.Tasks.Task<string> DeletePostAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetThread", ReplyAction="http://tempuri.org/IService1/GetThreadResponse")]
        FrontEnd2.ServiceReference1.ThreadDTO[] GetThread();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetThread", ReplyAction="http://tempuri.org/IService1/GetThreadResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.ThreadDTO[]> GetThreadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getThreadById", ReplyAction="http://tempuri.org/IService1/getThreadByIdResponse")]
        FrontEnd2.ServiceReference1.ThreadDTO getThreadById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getThreadById", ReplyAction="http://tempuri.org/IService1/getThreadByIdResponse")]
        System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.ThreadDTO> getThreadByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddThread", ReplyAction="http://tempuri.org/IService1/AddThreadResponse")]
        string AddThread(FrontEnd2.ServiceReference1.ThreadDTO postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddThread", ReplyAction="http://tempuri.org/IService1/AddThreadResponse")]
        System.Threading.Tasks.Task<string> AddThreadAsync(FrontEnd2.ServiceReference1.ThreadDTO postDto);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteThread", ReplyAction="http://tempuri.org/IService1/DeleteThreadResponse")]
        string DeleteThread(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteThread", ReplyAction="http://tempuri.org/IService1/DeleteThreadResponse")]
        System.Threading.Tasks.Task<string> DeleteThreadAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : FrontEnd2.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<FrontEnd2.ServiceReference1.IService1>, FrontEnd2.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public FrontEnd2.ServiceReference1.CompositeType GetDataUsingDataContract(FrontEnd2.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(FrontEnd2.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public FrontEnd2.ServiceReference1.UserDTO[] GetUser() {
            return base.Channel.GetUser();
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.UserDTO[]> GetUserAsync() {
            return base.Channel.GetUserAsync();
        }
        
        public FrontEnd2.ServiceReference1.UserDTO GetUserById(int id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.UserDTO> GetUserByIdAsync(int id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public string PostUser(FrontEnd2.ServiceReference1.UserDTO userDto) {
            return base.Channel.PostUser(userDto);
        }
        
        public System.Threading.Tasks.Task<string> PostUserAsync(FrontEnd2.ServiceReference1.UserDTO userDto) {
            return base.Channel.PostUserAsync(userDto);
        }
        
        public string DeleteUser(int id) {
            return base.Channel.DeleteUser(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteUserAsync(int id) {
            return base.Channel.DeleteUserAsync(id);
        }
        
        public FrontEnd2.ServiceReference1.PostDTO[] GetPost() {
            return base.Channel.GetPost();
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.PostDTO[]> GetPostAsync() {
            return base.Channel.GetPostAsync();
        }
        
        public FrontEnd2.ServiceReference1.PostDTO getPostById(int id) {
            return base.Channel.getPostById(id);
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.PostDTO> getPostByIdAsync(int id) {
            return base.Channel.getPostByIdAsync(id);
        }
        
        public string AddPost(FrontEnd2.ServiceReference1.PostDTO postDto) {
            return base.Channel.AddPost(postDto);
        }
        
        public System.Threading.Tasks.Task<string> AddPostAsync(FrontEnd2.ServiceReference1.PostDTO postDto) {
            return base.Channel.AddPostAsync(postDto);
        }
        
        public string DeletePost(int id) {
            return base.Channel.DeletePost(id);
        }
        
        public System.Threading.Tasks.Task<string> DeletePostAsync(int id) {
            return base.Channel.DeletePostAsync(id);
        }
        
        public FrontEnd2.ServiceReference1.ThreadDTO[] GetThread() {
            return base.Channel.GetThread();
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.ThreadDTO[]> GetThreadAsync() {
            return base.Channel.GetThreadAsync();
        }
        
        public FrontEnd2.ServiceReference1.ThreadDTO getThreadById(int id) {
            return base.Channel.getThreadById(id);
        }
        
        public System.Threading.Tasks.Task<FrontEnd2.ServiceReference1.ThreadDTO> getThreadByIdAsync(int id) {
            return base.Channel.getThreadByIdAsync(id);
        }
        
        public string AddThread(FrontEnd2.ServiceReference1.ThreadDTO postDto) {
            return base.Channel.AddThread(postDto);
        }
        
        public System.Threading.Tasks.Task<string> AddThreadAsync(FrontEnd2.ServiceReference1.ThreadDTO postDto) {
            return base.Channel.AddThreadAsync(postDto);
        }
        
        public string DeleteThread(int id) {
            return base.Channel.DeleteThread(id);
        }
        
        public System.Threading.Tasks.Task<string> DeleteThreadAsync(int id) {
            return base.Channel.DeleteThreadAsync(id);
        }
    }
}
